package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

@Autonomous(name="AutoEncoder", group="")
public class AutoEncoder extends LinearOpMode {
    //1.5 seconds of spinning at 0.75 = 2 ft.

    private ElapsedTime runtime = new ElapsedTime();
    Hardware robot   = new Hardware();

    static final double FORWARD_SPEED = 0.2;
    static final double REVERSE_SPEED = -0.2;
    static final double     COUNTS_PER_MOTOR_REV    = 312 ;    // eg: TETRIX Motor Encoder
    static final double     DRIVE_GEAR_REDUCTION    = 2.0 ;     // This is < 1.0 if geared UP
    static final double     WHEEL_DIAMETER_INCHES   = 3.5 ;     // For figuring circumference
    static final double APPROACH_SPEED = 0.5;
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double     DRIVE_SPEED             = 0.2;
    static final double     TURN_SPEED              = 0.2;
    @Override
    public void runOpMode() {

        /* Initialize the drive system variables.
         * The init() method of the hardware class does all the work here
         */
        robot.init(hardwareMap);


        telemetry.addData("Autonomous Mode Status", "Ready to Run");
        telemetry.update();

        telemetry.addData("Status", "Resetting Encoders");    //
        telemetry.update();

        //robot.leftFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       // robot.rightFront.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       // robot.leftBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       // robot.rightBack.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        robot.leftFront.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        robot.rightFront.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        robot.leftBack.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        robot.rightBack.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        // Send telemetry message to indicate successful Encoder reset
        telemetry.addData("Path0",  "Starting at %7d :%7d",
                robot.leftFront.getCurrentPosition(),
                robot.rightFront.getCurrentPosition(),
                robot.leftBack.getCurrentPosition(),
                robot.rightBack.getCurrentPosition());
        telemetry.update();

        waitForStart();

        //Go towards the block


        while (opModeIsActive()){
            //encoderDrive(DRIVE_SPEED,  10,  10, 5.0);  // S1: Forward 47 Inches with 5 Sec timeout
            //encoderDrive(TURN_SPEED,   12, -12, 5.0);  // S2: Turn Right 12 Inches with 4 Sec timeout
            //encoderDrive(DRIVE_SPEED, -30, -30, 5.0);  // S3: Reverse 24 Inches with 4 Sec timeout



        }



            while (opModeIsActive() && (runtime.seconds() < 25)) {
                //telemetry.addData("Moving", "Forward", runtime.seconds());
                //telemetry.update();
                if (runtime.seconds() == 0) {
                    runtime.reset();
                    while (opModeIsActive() && (runtime.seconds() < 25)) {
                        telemetry.addData("Moving", "Forward", runtime.seconds());
                        telemetry.update();
                        robot.leftFront.setPower(0.5);
                        robot.leftBack.setPower(0.5);
                        robot.rightFront.setPower(0.5);
                        robot.rightBack.setPower(0.5);
                    }
                }
            }
/*
        while (opModeIsActive() && (runtime.seconds() < 20)) {
            telemetry.addData("Moving", "Backward", runtime.seconds());
            telemetry.update();
            if (runtime.seconds() == 0) {
                runtime.reset();
                while (opModeIsActive() && (runtime.seconds() < 5)) {
                    telemetry.addData("Moving", "Backward", runtime.seconds());
                    telemetry.update();
                    robot.leftFront.setPower(-0.5);
                    robot.leftBack.setPower(-0.5);
                    robot.rightFront.setPower(-0.5);
                    robot.rightBack.setPower(-0.5);
                }
            }
        }*/
            /*
            while (opModeIsActive() && (runtime.seconds() < 6.3)) {
                telemetry.addData("Path", "Towards Square 2", runtime.seconds());
                telemetry.update();
                if (runtime.seconds() == 0) {
                    runtime.reset();
                    while (opModeIsActive() && (runtime.seconds() < 1.5)) {
                        telemetry.addData("Path", "Shuffle Right", runtime.seconds());
                        telemetry.update();
                        robot.leftFront.setPower(0.75);
                        robot.leftBack.setPower(-0.75);
                        robot.rightFront.setPower(0.75);
                        robot.rightBack.setPower(-0.75);
                    }
                }
            }


            while (opModeIsActive() && (runtime.seconds() < 8.2)) {
                telemetry.addData("Path", "Towards Square 3", runtime.seconds());
                telemetry.update();
                if (runtime.seconds() == 0) {
                    runtime.reset();
                    while (opModeIsActive() && (runtime.seconds() < 1.5)) {
                        telemetry.addData("Path", "Shuffle Left", runtime.seconds());
                        telemetry.update();
                        robot.leftFront.setPower(-0.75);
                        robot.leftBack.setPower(0.75);
                        robot.rightFront.setPower(-0.75);
                        robot.rightBack.setPower(0.75);
                    }
                }
            }*/
        }


    public void encoderDrive(double speed,
                             double leftInches, double rightInches,
                             double timeoutS) {
        speed = 0.5;
        int newLeftTarget;
        int newRightTarget;

        // Ensure that the opmode is still active
        if (opModeIsActive()) {

            // Determine new target position, and pass to motor controller

            newRightTarget = robot.rightFront.getCurrentPosition() + (int)(rightInches * COUNTS_PER_INCH);
            newLeftTarget = robot.leftBack.getCurrentPosition() + (int)(leftInches * COUNTS_PER_INCH);
            robot.leftFront.setTargetPosition(newLeftTarget);
            robot.leftBack.setTargetPosition(newLeftTarget);
            robot.rightFront.setTargetPosition(newRightTarget);
            robot.rightBack.setTargetPosition(newRightTarget);

            // Turn On RUN_TO_POSITION
            robot.leftFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.leftBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.rightFront.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            robot.rightBack.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // reset the timeout time and start motion.
            runtime.reset();
            robot.leftFront.setPower((speed));
            robot.leftBack.setPower((speed));
            robot.rightFront.setPower((speed));
            robot.rightBack.setPower((speed));

            // keep looping while we are still active, and there is time left, and both motors are running.
            // Note: We use (isBusy() && isBusy()) in the loop test, which means that when EITHER motor hits
            // its target position, the motion will stop.  This is "safer" in the event that the robot will
            // always end the motion as soon as possible.
            // However, if you require that BOTH motors have finished their moves before the robot continues
            // onto the next step, use (isBusy() || isBusy()) in the loop test

            while (opModeIsActive() &&
                    (runtime.seconds() < timeoutS) &&
                    (robot.leftFront.isBusy() && robot.leftBack.isBusy() && robot.rightFront.isBusy() && robot.rightBack.isBusy())) {

                // Display it for the driver.
                telemetry.addData("Direction",  "Running speed %,.2f",speed);
                telemetry.addData("Negative Path1",  "Running to %7d :%7d", newLeftTarget,  newRightTarget);
                telemetry.addData("Negative  Path2",  "Running at %7d :%7d",
                        robot.leftFront.getCurrentPosition(),
                        robot.leftBack.getCurrentPosition(),
                        robot.rightFront.getCurrentPosition(),
                        robot.rightBack.getCurrentPosition());
                telemetry.update();
            }

            // Stop all motion;
            robot.leftFront.setPower(0);
            robot.leftBack.setPower(0);
            robot.rightFront.setPower(0);
            robot.rightBack.setPower(0);

            // Turn off RUN_TO_POSITION
            robot.leftFront.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            robot.leftBack.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            robot.rightFront.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            robot.rightBack.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

            //  sleep(250);   // optional pause after each move
        }
    }
}
